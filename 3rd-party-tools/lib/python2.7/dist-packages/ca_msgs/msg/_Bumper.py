# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ca_msgs/Bumper.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Bumper(genpy.Message):
  _md5sum = "18fe5b1d31e6a8db180b924157ac665e"
  _type = "ca_msgs/Bumper"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """Header header

# Contact sensors
bool is_left_pressed
bool is_right_pressed

# Bumper light sensors (Create 2 only) in order from left to right
# Value = true if an obstacle detected
bool is_light_left
bool is_light_front_left
bool is_light_center_left
bool is_light_center_right
bool is_light_front_right
bool is_light_right

# Raw light sensor signals
# Values in range [0, 4095]
uint16 light_signal_left
uint16 light_signal_front_left
uint16 light_signal_center_left
uint16 light_signal_center_right
uint16 light_signal_front_right
uint16 light_signal_right

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['header','is_left_pressed','is_right_pressed','is_light_left','is_light_front_left','is_light_center_left','is_light_center_right','is_light_front_right','is_light_right','light_signal_left','light_signal_front_left','light_signal_center_left','light_signal_center_right','light_signal_front_right','light_signal_right']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','bool','bool','bool','bool','uint16','uint16','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,is_left_pressed,is_right_pressed,is_light_left,is_light_front_left,is_light_center_left,is_light_center_right,is_light_front_right,is_light_right,light_signal_left,light_signal_front_left,light_signal_center_left,light_signal_center_right,light_signal_front_right,light_signal_right

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Bumper, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.is_left_pressed is None:
        self.is_left_pressed = False
      if self.is_right_pressed is None:
        self.is_right_pressed = False
      if self.is_light_left is None:
        self.is_light_left = False
      if self.is_light_front_left is None:
        self.is_light_front_left = False
      if self.is_light_center_left is None:
        self.is_light_center_left = False
      if self.is_light_center_right is None:
        self.is_light_center_right = False
      if self.is_light_front_right is None:
        self.is_light_front_right = False
      if self.is_light_right is None:
        self.is_light_right = False
      if self.light_signal_left is None:
        self.light_signal_left = 0
      if self.light_signal_front_left is None:
        self.light_signal_front_left = 0
      if self.light_signal_center_left is None:
        self.light_signal_center_left = 0
      if self.light_signal_center_right is None:
        self.light_signal_center_right = 0
      if self.light_signal_front_right is None:
        self.light_signal_front_right = 0
      if self.light_signal_right is None:
        self.light_signal_right = 0
    else:
      self.header = std_msgs.msg.Header()
      self.is_left_pressed = False
      self.is_right_pressed = False
      self.is_light_left = False
      self.is_light_front_left = False
      self.is_light_center_left = False
      self.is_light_center_right = False
      self.is_light_front_right = False
      self.is_light_right = False
      self.light_signal_left = 0
      self.light_signal_front_left = 0
      self.light_signal_center_left = 0
      self.light_signal_center_right = 0
      self.light_signal_front_right = 0
      self.light_signal_right = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8B6H.pack(_x.is_left_pressed, _x.is_right_pressed, _x.is_light_left, _x.is_light_front_left, _x.is_light_center_left, _x.is_light_center_right, _x.is_light_front_right, _x.is_light_right, _x.light_signal_left, _x.light_signal_front_left, _x.light_signal_center_left, _x.light_signal_center_right, _x.light_signal_front_right, _x.light_signal_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.is_left_pressed, _x.is_right_pressed, _x.is_light_left, _x.is_light_front_left, _x.is_light_center_left, _x.is_light_center_right, _x.is_light_front_right, _x.is_light_right, _x.light_signal_left, _x.light_signal_front_left, _x.light_signal_center_left, _x.light_signal_center_right, _x.light_signal_front_right, _x.light_signal_right,) = _struct_8B6H.unpack(str[start:end])
      self.is_left_pressed = bool(self.is_left_pressed)
      self.is_right_pressed = bool(self.is_right_pressed)
      self.is_light_left = bool(self.is_light_left)
      self.is_light_front_left = bool(self.is_light_front_left)
      self.is_light_center_left = bool(self.is_light_center_left)
      self.is_light_center_right = bool(self.is_light_center_right)
      self.is_light_front_right = bool(self.is_light_front_right)
      self.is_light_right = bool(self.is_light_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8B6H.pack(_x.is_left_pressed, _x.is_right_pressed, _x.is_light_left, _x.is_light_front_left, _x.is_light_center_left, _x.is_light_center_right, _x.is_light_front_right, _x.is_light_right, _x.light_signal_left, _x.light_signal_front_left, _x.light_signal_center_left, _x.light_signal_center_right, _x.light_signal_front_right, _x.light_signal_right))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.is_left_pressed, _x.is_right_pressed, _x.is_light_left, _x.is_light_front_left, _x.is_light_center_left, _x.is_light_center_right, _x.is_light_front_right, _x.is_light_right, _x.light_signal_left, _x.light_signal_front_left, _x.light_signal_center_left, _x.light_signal_center_right, _x.light_signal_front_right, _x.light_signal_right,) = _struct_8B6H.unpack(str[start:end])
      self.is_left_pressed = bool(self.is_left_pressed)
      self.is_right_pressed = bool(self.is_right_pressed)
      self.is_light_left = bool(self.is_light_left)
      self.is_light_front_left = bool(self.is_light_front_left)
      self.is_light_center_left = bool(self.is_light_center_left)
      self.is_light_center_right = bool(self.is_light_center_right)
      self.is_light_front_right = bool(self.is_light_front_right)
      self.is_light_right = bool(self.is_light_right)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_8B6H = struct.Struct("<8B6H")
